{"version":3,"file":"scoped-registry-mixin.js","sourceRoot":"","sources":["../src/scoped-registry-mixin.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAGH,OAAO,EAAC,WAAW,EAAC,MAAM,kCAAkC,CAAC;AAmB7D,MAAM,UAAU,kBAAkB,CAChC,UAAsB;IAEtB,OAAO,MAAM,mBAAoB,SAAQ,UAAU;QAOxC,gBAAgB;YACvB,MAAM,WAAW,GAAG,IAAI,CAAC,WACN,CAAC;YAEpB,MAAM,EAAC,QAAQ,EAAE,kBAAkB,EAAE,iBAAiB,EAAC,GAAG,WAAW,CAAC;YAEtE,IAAI,kBAAkB,IAAI,CAAC,QAAQ,EAAE;gBACnC,WAAW,CAAC,QAAQ,GAAG,IAAI,qBAAqB,EAAE,CAAC;gBAEnD,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE,CAC9D,WAAW,CAAC,QAAS,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAC7C,CAAC;aACH;YAED,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC;gBACvE,GAAG,iBAAiB;gBACpB,cAAc,EAAE,WAAW,CAAC,QAAQ;aACrC,CAAC,CAAC,CAAC;YAEJ,WAAW,CACT,UAAU,EACT,IAAI,CAAC,WAAiC,CAAC,aAAc,CACvD,CAAC;YAEF,OAAO,UAAU,CAAC;QACpB,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport type {LitElement} from 'lit';\nimport {adoptStyles} from '@lit/reactive-element/css-tag.js';\n\n// Proposed interface changes\ndeclare global {\n  interface ShadowRootInit {\n    customElements?: CustomElementRegistry;\n  }\n  interface ShadowRoot {\n    importNode(node: Node, deep?: boolean): Node;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype LitElementConstructor = new (...args: any[]) => LitElement;\n\nexport type ElementDefinitionsMap = {\n  [key: string]: typeof HTMLElement;\n};\n\nexport function ScopedRegistryHost<SuperClass extends LitElementConstructor>(\n  superclass: SuperClass\n): SuperClass {\n  return class ScopedRegistryMixin extends superclass {\n    /**\n     * Obtains the scoped elements definitions map\n     */\n    static elementDefinitions?: ElementDefinitionsMap;\n    static registry?: CustomElementRegistry;\n\n    override createRenderRoot() {\n      const constructor = this.constructor as typeof ScopedRegistryMixin &\n        typeof LitElement;\n\n      const {registry, elementDefinitions, shadowRootOptions} = constructor;\n\n      if (elementDefinitions && !registry) {\n        constructor.registry = new CustomElementRegistry();\n\n        Object.entries(elementDefinitions).forEach(([tagName, klass]) =>\n          constructor.registry!.define(tagName, klass)\n        );\n      }\n\n      const renderRoot = (this.renderOptions.creationScope = this.attachShadow({\n        ...shadowRootOptions,\n        customElements: constructor.registry,\n      }));\n\n      adoptStyles(\n        renderRoot,\n        (this.constructor as typeof LitElement).elementStyles!\n      );\n\n      return renderRoot;\n    }\n  };\n}\n"]}