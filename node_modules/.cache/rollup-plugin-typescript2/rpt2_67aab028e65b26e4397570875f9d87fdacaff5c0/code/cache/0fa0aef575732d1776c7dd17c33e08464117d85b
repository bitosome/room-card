{"code":"import { noChange } from 'lit';\r\nimport { directive, Directive } from 'lit/directive';\r\nimport { fireEvent } from 'custom-card-helpers';\r\nconst isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0;\r\nclass ActionHandler extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.holdTime = 500;\r\n        this.held = false;\r\n        this.ripple = document.createElement('mwc-ripple');\r\n    }\r\n    connectedCallback() {\r\n        Object.assign(this.style, {\r\n            position: 'absolute',\r\n            width: isTouch ? '100px' : '50px',\r\n            height: isTouch ? '100px' : '50px',\r\n            transform: 'translate(-50%, -50%)',\r\n            pointerEvents: 'none',\r\n            zIndex: '999',\r\n        });\r\n        this.appendChild(this.ripple);\r\n        this.ripple.primary = true;\r\n        ['touchcancel', 'mouseout', 'mouseup', 'touchmove', 'mousewheel', 'wheel', 'scroll'].forEach((ev) => {\r\n            document.addEventListener(ev, () => {\r\n                clearTimeout(this.timer);\r\n                this.stopAnimation();\r\n                this.timer = undefined;\r\n            }, { passive: true });\r\n        });\r\n    }\r\n    bind(element, options) {\r\n        if (element.actionHandler) {\r\n            return;\r\n        }\r\n        element.actionHandler = true;\r\n        element.addEventListener('contextmenu', (ev) => {\r\n            const e = ev || window.event;\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            e.cancelBubble = true;\r\n            e.returnValue = false;\r\n            return false;\r\n        });\r\n        const start = (ev) => {\r\n            this.held = false;\r\n            let x;\r\n            let y;\r\n            if (ev.touches) {\r\n                x = ev.touches[0].pageX;\r\n                y = ev.touches[0].pageY;\r\n            }\r\n            else {\r\n                x = ev.pageX;\r\n                y = ev.pageY;\r\n            }\r\n            this.timer = window.setTimeout(() => {\r\n                this.startAnimation(x, y);\r\n                this.held = true;\r\n            }, this.holdTime);\r\n        };\r\n        const end = (ev) => {\r\n            // Prevent mouse event if touch event\r\n            ev.preventDefault();\r\n            if (['touchend', 'touchcancel'].includes(ev.type) && this.timer === undefined) {\r\n                return;\r\n            }\r\n            clearTimeout(this.timer);\r\n            this.stopAnimation();\r\n            this.timer = undefined;\r\n            if (this.held) {\r\n                fireEvent(element, 'action', { action: 'hold' });\r\n            }\r\n            else if (options.hasDoubleClick) {\r\n                if ((ev.type === 'click' && ev.detail < 2) || !this.dblClickTimeout) {\r\n                    this.dblClickTimeout = window.setTimeout(() => {\r\n                        this.dblClickTimeout = undefined;\r\n                        fireEvent(element, 'action', { action: 'tap' });\r\n                    }, 250);\r\n                }\r\n                else {\r\n                    clearTimeout(this.dblClickTimeout);\r\n                    this.dblClickTimeout = undefined;\r\n                    fireEvent(element, 'action', { action: 'double_tap' });\r\n                }\r\n            }\r\n            else {\r\n                fireEvent(element, 'action', { action: 'tap' });\r\n            }\r\n        };\r\n        const handleEnter = (ev) => {\r\n            if (ev.keyCode !== 13) {\r\n                return;\r\n            }\r\n            end(ev);\r\n        };\r\n        element.addEventListener('touchstart', start, { passive: true });\r\n        element.addEventListener('touchend', end);\r\n        element.addEventListener('touchcancel', end);\r\n        element.addEventListener('mousedown', start, { passive: true });\r\n        element.addEventListener('click', end);\r\n        element.addEventListener('keyup', handleEnter);\r\n    }\r\n    startAnimation(x, y) {\r\n        Object.assign(this.style, {\r\n            left: `${x}px`,\r\n            top: `${y}px`,\r\n            display: null,\r\n        });\r\n        this.ripple.disabled = false;\r\n        this.ripple.active = true;\r\n        this.ripple.unbounded = true;\r\n    }\r\n    stopAnimation() {\r\n        this.ripple.active = false;\r\n        this.ripple.disabled = true;\r\n        this.style.display = 'none';\r\n    }\r\n}\r\n// TODO You need to replace all instances of \"action-handler-boilerplate\" with \"action-handler-<your card name>\"\r\ncustomElements.define('action-handler-boilerplate', ActionHandler);\r\nconst getActionHandler = () => {\r\n    const body = document.body;\r\n    if (body.querySelector('action-handler-boilerplate')) {\r\n        return body.querySelector('action-handler-boilerplate');\r\n    }\r\n    const actionhandler = document.createElement('action-handler-boilerplate');\r\n    body.appendChild(actionhandler);\r\n    return actionhandler;\r\n};\r\nexport const actionHandlerBind = (element, options) => {\r\n    const actionhandler = getActionHandler();\r\n    if (!actionhandler) {\r\n        return;\r\n    }\r\n    actionhandler.bind(element, options);\r\n};\r\nexport const actionHandler = directive(class extends Directive {\r\n    update(part, [options]) {\r\n        actionHandlerBind(part.element, options);\r\n        return noChange;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\r\n    render(_options) { }\r\n});\r\n","references":["/Users/arku02/Repositories/room-card/node_modules/lit/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/lit/directive.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/types.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts"]}
