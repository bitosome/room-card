{"code":"var BitosomeRoomCard_1;\r\nimport { __decorate } from \"tslib\";\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { LitElement, html, css, nothing } from 'lit';\r\nimport { customElement, property, state } from 'lit/decorators';\r\nimport { handleAction, fireEvent } from 'custom-card-helpers';\r\nimport { actionHandler } from './action-handler-directive';\r\nimport { CARD_VERSION } from './const';\r\nfunction clone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n// Haptic feedback helper (dispatches HA's global 'haptic' event)\r\nfunction haptic(type) {\r\n    try {\r\n        // `type` can be a string like 'success' | 'warning' | 'failure' | 'light' | 'medium' | 'heavy'\r\n        fireEvent(window, 'haptic', type);\r\n    }\r\n    catch (_e) {\r\n        // no-op\r\n    }\r\n}\r\nlet BitosomeRoomCard = BitosomeRoomCard_1 = class BitosomeRoomCard extends LitElement {\r\n    static getStubConfig() {\r\n        return {\r\n            title: 'Living room',\r\n            tile_height: 80,\r\n            badge_size: 22,\r\n            badge_icon_size: 14,\r\n            main_icon_size: 48,\r\n            chip_font_size: 12,\r\n            card_shadow_color: '#000000',\r\n            card_shadow_intensity: 0.5,\r\n            unavailable_pulse_color: '#ff3b30',\r\n            header: {\r\n                main: {\r\n                    tap_entity: 'switch.living_room_light_group',\r\n                    main_name: 'Living room',\r\n                    main_icon: 'mdi:sofa-outline',\r\n                    temp_sensor: 'sensor.kitchen_living_room_temparature_average',\r\n                    humidity_sensor: 'sensor.kitchen_living_room_humidity_average',\r\n                    badges: [],\r\n                },\r\n                ac: { entity: 'climate.living_room_ac' },\r\n                thermostat: { entity: 'climate.thermostat_5_7_group' },\r\n            },\r\n            switch_rows: [],\r\n        };\r\n    }\r\n    setConfig(config) {\r\n        const c = clone(config || BitosomeRoomCard_1.getStubConfig());\r\n        // Normalize headers: support both `header` and `headers`\r\n        if (Array.isArray(c.headers)) {\r\n            // keep as-is, but also expose first as legacy header for backward references\r\n            const arr = c.headers;\r\n            c.header = arr[0] || c.header || {};\r\n        }\r\n        else {\r\n            c.header = c.header || {};\r\n            c.headers = c.header ? [c.header] : [];\r\n        }\r\n        if (!Array.isArray(c.switch_rows))\r\n            c.switch_rows = [];\r\n        this._config = c;\r\n    }\r\n    getCardSize() {\r\n        return 6;\r\n    }\r\n    render() {\r\n        var _a, _b;\r\n        if (!this._config)\r\n            return nothing;\r\n        const c = Object.assign(Object.assign({}, BitosomeRoomCard_1.getStubConfig()), this._config);\r\n        // Prefer multiple headers; fall back to single\r\n        const headers = Array.isArray(c.headers) && c.headers.length\r\n            ? c.headers\r\n            : [(c.header || {})];\r\n        const tileH = Number(c.tile_height) || 80;\r\n        const badgeSize = Number(c.badge_size) || 22;\r\n        const badgeIcon = Number(c.badge_icon_size) || 14;\r\n        // Allow header-level override for main icon size (use first header if provided)\r\n        const headerCfg = headers[0] || {};\r\n        const headerMainIconSize = Number((_a = headerCfg === null || headerCfg === void 0 ? void 0 : headerCfg.main_icon_size) !== null && _a !== void 0 ? _a : headerCfg === null || headerCfg === void 0 ? void 0 : headerCfg.maicon_size);\r\n        const mainIcon = Number.isFinite(headerMainIconSize) && headerMainIconSize > 0\r\n            ? headerMainIconSize\r\n            : (Number(c.main_icon_size) || 48);\r\n        const panelShadowColor = this._rgbaFromColor(c.card_shadow_color, c.card_shadow_intensity);\r\n        const chipFont = Number(c.chip_font_size) || 12;\r\n        const unavailColor = c.unavailable_pulse_color || '#ff3b30';\r\n        const hasUnavail = this._hasAnyUnavailable(c, headers);\r\n        const unavailWeak = this._rgbaFromColor(unavailColor, 0.18);\r\n        const unavailStrong = this._rgbaFromColor(unavailColor, 0.36);\r\n        return html `\n      <ha-card class=${hasUnavail ? 'unavailable' : ''}\n               style=${`--panel-shadow-color:${hasUnavail ? unavailWeak : panelShadowColor}; --unavail-weak:${unavailWeak}; --unavail-strong:${unavailStrong}`}\n               .header=${((_b = this._config) === null || _b === void 0 ? void 0 : _b.title) || undefined}>\n        <div class=\"metrics\" style=${`--tile-h:${tileH}px; --badge:${badgeSize}px; --badge-icon:${badgeIcon}px; --main-icon-size:${mainIcon}px; --chip-font-size:${chipFont}px;`}>\n          <div class=\"root\">\n            ${headers.map((h) => this._renderHeaderRow(h))}\n            ${this._renderSwitchRows(c.switch_rows)}\n          </div>\n        </div>\n      </ha-card>\n    `;\r\n    }\r\n    _renderHeaderRow(h) {\r\n        const mainRaw = h.main || {};\r\n        const main = {\r\n            tap_entity: mainRaw.tap_entity,\r\n            hold_entity: mainRaw.hold_entity || mainRaw.tap_entity,\r\n            light_group_entity: mainRaw.light_group_entity,\r\n            name: mainRaw.main_name || mainRaw.name,\r\n            icon: mainRaw.main_icon || mainRaw.icon,\r\n            temp_sensor: mainRaw.temp_sensor,\r\n            humidity_sensor: mainRaw.humidity_sensor,\r\n            badges: Array.isArray(mainRaw.badges) ? mainRaw.badges : [],\r\n            tap_action: mainRaw.tap_action,\r\n            hold_action: mainRaw.hold_action,\r\n            double_tap_action: mainRaw.double_tap_action,\r\n        };\r\n        const ac = h.ac || {};\r\n        const thermostat = h.thermostat || {};\r\n        const showAC = !!(ac === null || ac === void 0 ? void 0 : ac.entity);\r\n        const showThermo = !!(thermostat === null || thermostat === void 0 ? void 0 : thermostat.entity);\r\n        const cls = !showAC && !showThermo ? 'header-row only-main' : (showAC && showThermo ? 'header-row' : 'header-row main-plus-one');\r\n        return html `\n      <div class=${cls}>\n        ${this._renderMainTile(main)}\n        ${showAC ? this._renderACTile(ac.entity) : nothing}\n        ${showThermo ? this._renderThermoTile(thermostat.entity) : nothing}\n      </div>\n    `;\r\n    }\r\n    _renderMainTile(h) {\r\n        var _a;\r\n        const icon = h.icon || 'mdi:sofa-outline';\r\n        const name = h.name || '';\r\n        const tval = this._fmt2(h.temp_sensor, 2, 'Â°');\r\n        const hval = this._fmt2(h.humidity_sensor, 2, '%');\r\n        const hasHold = true; // main supports hold by default (for more-info)\r\n        const hasDbl = !!((h === null || h === void 0 ? void 0 : h.double_tap_action) || ((_a = this._config) === null || _a === void 0 ? void 0 : _a.double_tap_action));\r\n        // Entity driving the bulb state (and default toggling when no HA actions)\r\n        const hasBulb = !!h.light_group_entity;\r\n        const ctrl = h.light_group_entity || h.tap_entity || h.entity;\r\n        const isOn = hasBulb && this._isOn(ctrl);\r\n        const bulbBg = isOn ? 'linear-gradient(135deg,#ffcf57,#ffb200)' : 'rgba(0,0,0,0.06)';\r\n        const bulbIconColor = isOn ? '#ffffff' : 'var(--secondary-text-color)';\r\n        const defaultToggleTarget = h.light_group_entity || h.tap_entity || h.entity;\r\n        // Optional vertical illuminance badge: allow via badges array using type: 'illuminance'\r\n        const illumBadge = Array.isArray(h === null || h === void 0 ? void 0 : h.badges)\r\n            ? h.badges.find((b) => String((b === null || b === void 0 ? void 0 : b.type) || '').toLowerCase() === 'illuminance')\r\n            : undefined;\r\n        const illumTpl = illumBadge ? this._renderIlluminanceBadge(illumBadge) : nothing;\r\n        const hasControlBtn = typeof customElements !== 'undefined' && !!customElements.get('ha-control-button');\r\n        if (hasControlBtn) {\r\n            return html `\n        <ha-control-button\n          class=\"main-control\"\n          @action=${(ev) => this._onMainAction(ev, h, h.tap_entity, h.hold_entity, defaultToggleTarget)}\n          .actionHandler=${actionHandler({ hasHold, hasDoubleClick: hasDbl })}\n          role=\"button\" tabindex=\"0\"\n        >\n          <div class=\"main-tile\">\n            <ha-icon class=\"main-icon\" .icon=${icon}></ha-icon>\n            <div class=\"chip-tr\" data-role=\"chip\">\n              <ha-icon icon=\"mdi:thermometer\" class=\"chip-ico\"></ha-icon>\n              <span class=\"tval\">${tval}</span>\n              <span style=\"opacity:.6;\">|</span>\n              <ha-icon icon=\"mdi:water-percent\" class=\"chip-ico\"></ha-icon>\n              <span class=\"hval\">${hval}</span>\n            </div>\n            ${illumTpl}\n            <div class=\"main-badges-br\" data-role=\"badges\">\n              ${hasBulb ? html `\n                <div class=\"badge\" style=${`background:${bulbBg}`}>\n                  <ha-icon .icon=${'mdi:lightbulb'} style=${`color:${bulbIconColor}`}></ha-icon>\n                </div>` : nothing}\n              ${Array.isArray(h === null || h === void 0 ? void 0 : h.badges) && h.badges.length\r\n                ? html `${h.badges\r\n                    .filter((b) => String((b === null || b === void 0 ? void 0 : b.type) || '').toLowerCase() !== 'illuminance')\r\n                    .map((b) => this._renderExtraBadge(b))}`\r\n                : nothing}\n            </div>\n            <div class=\"main-name\">${name}</div>\n          </div>\n        </ha-control-button>\n      `;\r\n        }\r\n        return html `\n      <div class=\"main-tile\"\n           @action=${(ev) => this._onMainAction(ev, h, h.tap_entity, h.hold_entity, defaultToggleTarget)}\n           .actionHandler=${actionHandler({ hasHold, hasDoubleClick: hasDbl })}\n           role=\"button\" tabindex=\"0\">\n        <ha-icon class=\"main-icon\" .icon=${icon}></ha-icon>\n        <div class=\"chip-tr\" data-role=\"chip\">\n          <ha-icon icon=\"mdi:thermometer\" class=\"chip-ico\"></ha-icon>\n          <span class=\"tval\">${tval}</span>\n          <span style=\"opacity:.6;\">|</span>\n          <ha-icon icon=\"mdi:water-percent\" class=\"chip-ico\"></ha-icon>\n          <span class=\"hval\">${hval}</span>\n        </div>\n        ${illumTpl}\n        <div class=\"main-badges-br\" data-role=\"badges\">\n          ${hasBulb ? html `\n            <div class=\"badge\" style=${`background:${bulbBg}`}>\n              <ha-icon .icon=${'mdi:lightbulb'} style=${`color:${bulbIconColor}`}></ha-icon>\n            </div>` : nothing}\n          ${Array.isArray(h === null || h === void 0 ? void 0 : h.badges) && h.badges.length\r\n            ? html `${h.badges\r\n                .filter((b) => String((b === null || b === void 0 ? void 0 : b.type) || '').toLowerCase() !== 'illuminance')\r\n                .map((b) => this._renderExtraBadge(b))}`\r\n            : nothing}\n        </div>\n        <div class=\"main-name\">${name}</div>\n      </div>\n    `;\r\n    }\r\n    _renderIlluminanceBadge(b) {\r\n        const entity = (b === null || b === void 0 ? void 0 : b.entity) || (b === null || b === void 0 ? void 0 : b.tap_entity);\r\n        const icon = (b === null || b === void 0 ? void 0 : b.icon) || 'mdi:brightness-5';\r\n        const val = this._fmt2(entity, 0, ' lx');\r\n        // Click: open more-info by default, or if actions supplied, use them\r\n        const hasHAAction = !!((b === null || b === void 0 ? void 0 : b.tap_action) || (b === null || b === void 0 ? void 0 : b.hold_action) || (b === null || b === void 0 ? void 0 : b.double_tap_action));\r\n        const onAction = (ev) => {\r\n            const act = (ev.detail && ev.detail.action) || 'tap';\r\n            if (hasHAAction) {\r\n                handleAction(this, this.hass, b, act);\r\n                return;\r\n            }\r\n            if (act === 'hold') {\r\n                haptic('medium');\r\n                this._openMoreInfo(entity);\r\n            }\r\n            else\r\n                this._openMoreInfo(entity);\r\n        };\r\n        return html `\n      <div class=\"illum-badge\"\n           @action=${onAction}\n           .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: !!(b === null || b === void 0 ? void 0 : b.double_tap_action) })}\n           role=\"button\" tabindex=\"0\">\n        <ha-icon .icon=${icon}></ha-icon>\n        <span class=\"illum-val\">${val}</span>\n      </div>\n    `;\r\n    }\r\n    _renderExtraBadge(b) {\r\n        var _a, _b, _c, _d;\r\n        const entity = (b === null || b === void 0 ? void 0 : b.entity) || (b === null || b === void 0 ? void 0 : b.tap_entity);\r\n        const type = String((b === null || b === void 0 ? void 0 : b.type) || '').toLowerCase();\r\n        const iconFromCfg = b === null || b === void 0 ? void 0 : b.icon;\r\n        const st = entity && this.hass ? this.hass.states[entity] : undefined;\r\n        const state = ((st === null || st === void 0 ? void 0 : st.state) || '').toLowerCase();\r\n        // Determine visuals\r\n        let bg = 'rgba(0,0,0,0.06)';\r\n        let icon = iconFromCfg || 'mdi:checkbox-blank-circle-outline';\r\n        let icoColor = 'var(--secondary-text-color)';\r\n        const isActive = (s) => {\r\n            var _a, _b;\r\n            if (!s)\r\n                return false;\r\n            if (type === 'lock' || ((_a = entity === null || entity === void 0 ? void 0 : entity.startsWith('lock.')) !== null && _a !== void 0 ? _a : false))\r\n                return s === 'locked';\r\n            if ((_b = entity === null || entity === void 0 ? void 0 : entity.startsWith('cover.')) !== null && _b !== void 0 ? _b : false)\r\n                return s !== 'closed' && s !== 'closing';\r\n            return s === 'on' || s === 'open' || s === 'opening';\r\n        };\r\n        const active = isActive(state);\r\n        if (type === 'lock' || ((_a = entity === null || entity === void 0 ? void 0 : entity.startsWith('lock.')) !== null && _a !== void 0 ? _a : false)) {\r\n            icon = iconFromCfg || (active ? 'mdi:lock' : 'mdi:lock-open-variant');\r\n            if (active) {\r\n                bg = '#66bb6a';\r\n                icoColor = '#ffffff';\r\n            }\r\n        }\r\n        else if (type === 'gate' || ((_b = entity === null || entity === void 0 ? void 0 : entity.startsWith('cover.')) !== null && _b !== void 0 ? _b : false) || ((_c = entity === null || entity === void 0 ? void 0 : entity.startsWith('binary_sensor.')) !== null && _c !== void 0 ? _c : false)) {\r\n            const domain = (entity || '').split('.')[0];\r\n            const dc = (((_d = st === null || st === void 0 ? void 0 : st.attributes) === null || _d === void 0 ? void 0 : _d.device_class) || '').toLowerCase();\r\n            const gateLike = type === 'gate' || domain === 'cover' || (domain === 'binary_sensor' && /(door|window|garage|opening|gate)/.test(dc));\r\n            if (gateLike) {\r\n                const s = state;\r\n                let isOpen = false;\r\n                if (domain === 'cover') {\r\n                    isOpen = s === 'open' || s === 'opening' || (s !== 'closed' && s !== 'closing' && s !== 'unknown' && s !== 'unavailable');\r\n                }\r\n                else if (domain === 'binary_sensor') {\r\n                    // For contact sensors, on/open => open; off/closed => closed\r\n                    isOpen = s === 'on' || s === 'open' || s === 'opening';\r\n                }\r\n                else {\r\n                    isOpen = s === 'open' || s === 'opening' || s === 'on';\r\n                }\r\n                icon = iconFromCfg || (isOpen ? 'mdi:gate-open' : 'mdi:gate');\r\n                // Color rule: closed -> green, open -> red\r\n                if (isOpen) {\r\n                    bg = '#e53935';\r\n                    icoColor = '#ffffff';\r\n                }\r\n                else {\r\n                    bg = '#66bb6a';\r\n                    icoColor = '#ffffff';\r\n                }\r\n            }\r\n            else {\r\n                // Not a gate-like entity; fall back to generic handling below\r\n            }\r\n        }\r\n        else {\r\n            // Generic on/off-like badge\r\n            icon = iconFromCfg || (active ? 'mdi:check-circle' : 'mdi:checkbox-blank-circle-outline');\r\n            if (active) {\r\n                bg = '#42a5f5';\r\n                icoColor = '#ffffff';\r\n            }\r\n        }\r\n        const hasDbl = !!(b === null || b === void 0 ? void 0 : b.double_tap_action);\r\n        return html `\n      <div class=\"badge clickable\"\n           style=${`background:${bg}`}\n           @action=${(ev) => this._onBadgeAction(ev, b)}\n           .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: hasDbl })}\n           role=\"button\" tabindex=\"0\">\n        <ha-icon .icon=${icon} style=${`color:${icoColor}`}></ha-icon>\n      </div>\n    `;\r\n    }\r\n    _onBadgeAction(ev, b) {\r\n        const act = (ev.detail && ev.detail.action) || 'tap';\r\n        // If HA-native actions are provided, use them\r\n        if (this.hass && b && (b.tap_action || b.hold_action || b.double_tap_action)) {\r\n            handleAction(this, this.hass, b, act);\r\n            return;\r\n        }\r\n        const tap = (b === null || b === void 0 ? void 0 : b.tap_entity) || (b === null || b === void 0 ? void 0 : b.entity);\r\n        const hold = (b === null || b === void 0 ? void 0 : b.hold_entity) || (b === null || b === void 0 ? void 0 : b.entity);\r\n        if (act === 'hold') {\r\n            // Haptic feedback: medium on long press\r\n            haptic('medium');\r\n            this._openMoreInfo(hold || tap);\r\n            return;\r\n        }\r\n        const domain = (tap || '').split('.')[0];\r\n        // Safety default: lock badges open more-info on tap unless actions are explicitly provided\r\n        if (domain === 'lock') {\r\n            this._openMoreInfo(hold || tap);\r\n            return;\r\n        }\r\n        this._toggleByDomain(tap);\r\n    }\r\n    _toggleByDomain(entityId) {\r\n        if (!entityId || !this.hass)\r\n            return;\r\n        const st = this.hass.states[entityId];\r\n        const domain = entityId.split('.')[0];\r\n        const s = ((st === null || st === void 0 ? void 0 : st.state) || '').toLowerCase();\r\n        if (domain === 'lock') {\r\n            const next = s === 'locked' ? 'unlock' : 'lock';\r\n            this.hass.callService('lock', next, { entity_id: entityId });\r\n            return;\r\n        }\r\n        if (domain === 'cover') {\r\n            const next = (s === 'open' || s === 'opening') ? 'close_cover' : 'open_cover';\r\n            this.hass.callService('cover', next, { entity_id: entityId });\r\n            return;\r\n        }\r\n        this._toggleGeneric(entityId);\r\n    }\r\n    _renderACTile(entityId) {\r\n        var _a, _b, _c;\r\n        const mode = (((_c = (_b = (_a = this.hass) === null || _a === void 0 ? void 0 : _a.states) === null || _b === void 0 ? void 0 : _b[entityId]) === null || _c === void 0 ? void 0 : _c.state) || '').toLowerCase();\r\n        const active = !!mode && mode !== 'off';\r\n        const { bg, icon } = this._acBadge(mode);\r\n        const fanStyle = `color:${this._acModeColor(mode)}; ${active ? 'animation:spin 1.5s linear infinite;' : ''}`;\r\n        const pulse = this._acPulseColors(mode);\r\n        const hasControlBtn = typeof customElements !== 'undefined' && !!customElements.get('ha-control-button');\r\n        if (hasControlBtn) {\r\n            const wrapStyle = `${active ? `--pulse-weak:${pulse.weak}; --pulse-strong:${pulse.strong};` : ''}`;\r\n            return html `\n        <ha-control-button\n          class=\"ac-control ${active ? 'on' : ''}\"\n          style=${wrapStyle}\n          @action=${(ev) => this._onACAction(ev, entityId)}\n          .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: false })}\n          role=\"button\" tabindex=\"0\"\n        >\n          <div class=\"square ac-tile\">\n            <div class=\"badge badge-tr\" style=${`background:${bg}`}> \n              <ha-icon .icon=${icon} style=\"color:#fff\"></ha-icon>\n            </div>\n            <div class=\"center-xy\">\n              <ha-icon class=\"ac-fan\" icon=\"mdi:fan\" style=${fanStyle}></ha-icon>\n            </div>\n          </div>\n        </ha-control-button>\n      `;\r\n        }\r\n        const tileStyle = `${active ? 'animation:glowPulse 2.4s ease-in-out infinite;' : ''} --pulse-weak:${pulse.weak}; --pulse-strong:${pulse.strong};`;\r\n        return html `\n      <div class=\"square ac-tile\" style=${tileStyle}\n           @action=${(ev) => this._onACAction(ev, entityId)}\n           .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: false })}\n           role=\"button\" tabindex=\"0\">\n        <div class=\"badge badge-tr\" style=${`background:${bg}`}> \n          <ha-icon .icon=${icon} style=\"color:#fff\"></ha-icon>\n        </div>\n        <div class=\"center-xy\">\n          <ha-icon class=\"ac-fan\" icon=\"mdi:fan\" style=${fanStyle}></ha-icon>\n        </div>\n      </div>\n    `;\r\n    }\r\n    _renderThermoTile(entityId) {\r\n        var _a, _b, _c, _d, _f, _g, _h, _j;\r\n        const st = (_b = (_a = this.hass) === null || _a === void 0 ? void 0 : _a.states) === null || _b === void 0 ? void 0 : _b[entityId];\r\n        const target = (_g = (_d = (_c = st === null || st === void 0 ? void 0 : st.attributes) === null || _c === void 0 ? void 0 : _c.temperature) !== null && _d !== void 0 ? _d : (_f = st === null || st === void 0 ? void 0 : st.attributes) === null || _f === void 0 ? void 0 : _f.target_temp) !== null && _g !== void 0 ? _g : (_h = st === null || st === void 0 ? void 0 : st.attributes) === null || _h === void 0 ? void 0 : _h.target_temperature;\r\n        const tStr = this._fmtNumber(target, 1) + 'Â°';\r\n        const hvacAction = (((_j = st === null || st === void 0 ? void 0 : st.attributes) === null || _j === void 0 ? void 0 : _j.hvac_action) || '').toLowerCase();\r\n        const state = ((st === null || st === void 0 ? void 0 : st.state) || '').toLowerCase();\r\n        const color = state === 'off' ? 'gray' : (hvacAction === 'heating' || state === 'heating') ? '#ff7043' : '#66bb6a';\r\n        // Glow strictly when actively heating. No glow when idle or just in heat mode.\r\n        const isHeating = (hvacAction === 'heating');\r\n        // Non-wrapper: apply pure glow pulse (no movement) to tile itself\r\n        const tileStyle = `${(!customElements || !customElements.get('ha-control-button')) && isHeating\r\n            ? 'animation:glowPulse 2.4s ease-in-out infinite; --pulse-weak: rgba(255,112,67,0.12); --pulse-strong: rgba(255,112,67,0.26);'\r\n            : ''}`;\r\n        const pillBg = isHeating\r\n            ? 'var(--state-climate-heat-color, #ff7043)'\r\n            : 'var(--chip-background-color, rgba(0,0,0,0.06))';\r\n        const pillFg = isHeating\r\n            ? 'var(--primary-background-color, #fff)'\r\n            : 'var(--secondary-text-color)';\r\n        const hasHaChip = typeof customElements !== 'undefined' && !!customElements.get('ha-chip');\r\n        const hasControlBtn2 = typeof customElements !== 'undefined' && !!customElements.get('ha-control-button');\r\n        const wrapStyle = isHeating\r\n            ? `--pulse-weak: rgba(255,112,67,0.12); --pulse-strong: rgba(255,112,67,0.26);`\r\n            : '';\r\n        if (hasControlBtn2) {\r\n            return html `\n        <ha-control-button\n          class=\"thermo-control ${isHeating ? 'on' : ''}\"\n          style=${wrapStyle}\n          @action=${(ev) => this._onThermoAction(ev, entityId)}\n          .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: false })}\n          role=\"button\" tabindex=\"0\"\n        >\n          <div class=\"square thermo-tile\" style=${tileStyle}>\n            <div class=\"temp-chip-tr\">\n              ${hasHaChip\r\n                ? html `<ha-chip style=${`--ha-chip-background-color:${pillBg};--chip-background-color:${pillBg};--ha-chip-text-color:${pillFg};color:${pillFg};font-weight:700;`}>${tStr}</ha-chip>`\r\n                : html `<div class=\"temp-pill\" style=${`background:${pillBg};color:${pillFg};`}><span class=\"thermo-target\">${tStr}</span></div>`}\n            </div>\n            <div class=\"center-xy\">\n              <ha-icon class=\"thermo-icon\" icon=\"mdi:thermostat\" style=${`color:${color}`}></ha-icon>\n            </div>\n          </div>\n        </ha-control-button>\n      `;\r\n        }\r\n        return html `\n      <div class=\"square thermo-tile\" style=${tileStyle}\n           @action=${(ev) => this._onThermoAction(ev, entityId)}\n           .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: false })}\n           role=\"button\" tabindex=\"0\">\n        <div class=\"temp-chip-tr\">\n          ${hasHaChip\r\n            ? html `<ha-chip style=${`--ha-chip-background-color:${pillBg};--chip-background-color:${pillBg};--ha-chip-text-color:${pillFg};color:${pillFg};font-weight:700;`}>${tStr}</ha-chip>`\r\n            : html `<div class=\"temp-pill\" style=${`background:${pillBg};color:${pillFg};`}><span class=\"thermo-target\">${tStr}</span></div>`}\n        </div>\n        <div class=\"center-xy\">\n          <ha-icon class=\"thermo-icon\" icon=\"mdi:thermostat\" style=${`color:${color}`}></ha-icon>\n        </div>\n      </div>\n    `;\r\n    }\r\n    _onMainAction(ev, tileCfg, tap, hold, lightGroup) {\r\n        const action = (ev.detail && ev.detail.action) || 'tap';\r\n        // Tile-level actions override card-level\r\n        if (this.hass && tileCfg && (tileCfg.tap_action || tileCfg.hold_action || tileCfg.double_tap_action)) {\r\n            handleAction(this, this.hass, tileCfg, action);\r\n            return;\r\n        }\r\n        // If configured, use boilerplate handleAction against card-level actions\r\n        if (this.hass && this._config && (this._config.tap_action || this._config.hold_action || this._config.double_tap_action)) {\r\n            handleAction(this, this.hass, this._config, action);\r\n            return;\r\n        }\r\n        // Switch-like behavior for main tile\r\n        if (action === 'hold') {\r\n            // Haptic feedback: medium on long press\r\n            haptic('medium');\r\n            this._openMoreInfo(hold || tap);\r\n        }\r\n        else {\r\n            this._toggleGeneric(lightGroup || tap);\r\n        }\r\n    }\r\n    _onACAction(ev, entity) {\r\n        const act = (ev.detail && ev.detail.action) || 'tap';\r\n        if (act === 'hold') {\r\n            // Haptic feedback: medium on long press\r\n            haptic('medium');\r\n            this._openMoreInfo(entity);\r\n        }\r\n        else {\r\n            // Haptic feedback: success on tap\r\n            haptic('success');\r\n            this._acToggle(entity);\r\n        }\r\n    }\r\n    _onThermoAction(ev, entity) {\r\n        const act = (ev.detail && ev.detail.action) || 'tap';\r\n        if (act === 'hold') {\r\n            // Haptic feedback: medium on long press\r\n            haptic('medium');\r\n            this._openMoreInfo(entity);\r\n        }\r\n        else {\r\n            // Haptic feedback: success on tap\r\n            haptic('success');\r\n            this._thermoToggle(entity);\r\n        }\r\n    }\r\n    _renderSwitchRows(rows) {\r\n        if (!rows || !rows.length)\r\n            return nothing;\r\n        return html `${rows.map((row) => {\r\n            const r = row;\r\n            const items = Array.isArray(row) ? row : (Array.isArray(r === null || r === void 0 ? void 0 : r.row) ? r.row : []);\r\n            const cols = Math.max(1, items.length || 1);\r\n            return html `<div class=\"switch-row\" style=${`--cols:${cols}`}>${items.map((sw) => this._renderSwitchTile(sw))}</div>`;\r\n        })}`;\r\n    }\r\n    _renderSwitchTile(sw) {\r\n        const tap = (sw === null || sw === void 0 ? void 0 : sw.entity) || '';\r\n        const icon = (sw === null || sw === void 0 ? void 0 : sw.icon) || '';\r\n        const name = (sw === null || sw === void 0 ? void 0 : sw.name) || '';\r\n        const type = String((sw === null || sw === void 0 ? void 0 : sw.type) || 'switch').toLowerCase();\r\n        const isSmart = type === 'smart_plug';\r\n        const on = this._isOn(tap);\r\n        const iconSize = (sw === null || sw === void 0 ? void 0 : sw.icon_size) || (sw === null || sw === void 0 ? void 0 : sw['icon-size']) || (sw === null || sw === void 0 ? void 0 : sw['icon_size']);\r\n        const nameWeight = (sw === null || sw === void 0 ? void 0 : sw.font_weight) || (sw === null || sw === void 0 ? void 0 : sw['font-weight']);\r\n        const nameSize = (sw === null || sw === void 0 ? void 0 : sw.font_size) || (sw === null || sw === void 0 ? void 0 : sw['font-size']);\r\n        const toPx = (v) => (v === undefined || v === null || v === '') ? '' : (String(v).match(/px|em|rem|%$/) ? String(v) : `${Number(v)}px`);\r\n        const iconDim = toPx(iconSize);\r\n        const iconStyle = iconDim ? `width:${iconDim};height:${iconDim};--mdc-icon-size:${iconDim};` : '';\r\n        const nameStyle = `${nameWeight ? `font-weight:${nameWeight};` : ''}${nameSize ? `font-size:${toPx(nameSize)};` : ''}`;\r\n        const cls = `switch-tile ${isSmart ? 'smart' : ''} ${on ? 'on' : ''}`;\r\n        const hasChip = typeof customElements !== 'undefined' && !!customElements.get('ha-chip');\r\n        const hasControlBtn = typeof customElements !== 'undefined' && !!customElements.get('ha-control-button');\r\n        const onColor = isSmart ? 'var(--switch-on-green, #00c853)' : 'var(--switch-on-yellow, #ffc107)';\r\n        const chipBg = 'var(--chip-background-color, rgba(0,0,0,0.06))';\r\n        const chipFg = on ? onColor : 'var(--secondary-text-color)';\r\n        // Prefer native HA control button styling when available\r\n        if (hasControlBtn) {\r\n            const btnCls = `switch-tile-btn ${isSmart ? 'smart' : ''} ${on ? 'on' : ''}`;\r\n            return html `\n        <ha-control-button\n          class=${btnCls}\n          @action=${(ev) => this._onSwitchAction(ev, sw)}\n          .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: !!(sw === null || sw === void 0 ? void 0 : sw.double_tap_action) })}\n          role=\"button\" tabindex=\"0\"\n        >\n          <div class=\"tile-inner\">\n            ${hasChip\r\n                ? html `<ha-chip style=${`--ha-chip-background-color:${chipBg};--chip-background-color:${chipBg};--ha-chip-text-color:${chipFg};color:${chipFg};font-weight:600;`}>\n                  ${icon ? html `<ha-icon .icon=${icon} style=${`margin-right:6px;${iconStyle}color:${chipFg};`}></ha-icon>` : nothing}\n                  ${name || tap}\n                </ha-chip>`\r\n                : html `\n                  ${icon ? html `<ha-icon class=\"switch-icon\" .icon=${icon} style=${`${iconStyle}${on ? `color:${onColor};` : ''}`}></ha-icon>` : nothing}\n                  ${name ? html `<div class=\"name\" style=${`${nameStyle}${on ? `color:${onColor};` : ''}`}>${name}</div>` : nothing}\n                `}\n          </div>\n        </ha-control-button>\n      `;\r\n        }\r\n        // Fallback: tile container (previous styling)\r\n        return html `\n      <div class=${cls}\n           @action=${(ev) => this._onSwitchAction(ev, sw)}\n           .actionHandler=${actionHandler({ hasHold: true, hasDoubleClick: !!(sw === null || sw === void 0 ? void 0 : sw.double_tap_action) })}\n           role=\"button\" tabindex=\"0\">\n        <div class=\"tile-inner\">\n          ${hasChip\r\n            ? html `<ha-chip style=${`--ha-chip-background-color:${chipBg};--chip-background-color:${chipBg};--ha-chip-text-color:${chipFg};color:${chipFg};font-weight:600;`}>\n                ${icon ? html `<ha-icon .icon=${icon} style=${`margin-right:6px;${iconStyle}color:${chipFg};`}></ha-icon>` : nothing}\n                ${name || tap}\n              </ha-chip>`\r\n            : html `\n                ${icon ? html `<ha-icon class=\"switch-icon\" .icon=${icon} style=${`${iconStyle}${on ? `color:${onColor};` : ''}`}></ha-icon>` : nothing}\n                ${name ? html `<div class=\"name\" style=${`${nameStyle}${on ? `color:${onColor};` : ''}`}>${name}</div>` : nothing}\n              `}\n        </div>\n      </div>\n    `;\r\n    }\r\n    // (Removed) Embedded Lovelace cards functionality\r\n    _onSwitchAction(ev, sw) {\r\n        const act = (ev.detail && ev.detail.action) || 'tap';\r\n        if (this.hass && sw && (sw.tap_action || sw.hold_action || sw.double_tap_action)) {\r\n            handleAction(this, this.hass, sw, act);\r\n            return;\r\n        }\r\n        const tap = sw === null || sw === void 0 ? void 0 : sw.entity;\r\n        const hold = (sw === null || sw === void 0 ? void 0 : sw.hold_entity) || tap;\r\n        if (act === 'hold') {\r\n            // Haptic feedback: medium on long press\r\n            haptic('medium');\r\n            this._openMoreInfo(hold || tap);\r\n        }\r\n        else {\r\n            this._toggleGeneric(tap);\r\n        }\r\n    }\r\n    _fmt2(entityId, digits, suffix) {\r\n        if (!entityId || !this.hass)\r\n            return 'â' + (suffix || '');\r\n        const st = this.hass.states[entityId];\r\n        if (!st || st.state === '' || st.state === 'unknown' || st.state === 'unavailable')\r\n            return 'â' + (suffix || '');\r\n        const n = Number(st.state);\r\n        return Number.isFinite(n) ? n.toFixed(digits) + (suffix || '') : String(st.state) + (suffix || '');\r\n    }\r\n    _fmtNumber(v, digits) {\r\n        if (v === undefined || v === null || v === '' || v === 'unknown' || v === 'unavailable')\r\n            return 'â';\r\n        const n = Number(v);\r\n        return Number.isFinite(n) ? n.toFixed(digits) : String(v);\r\n    }\r\n    _acModeColor(mode) {\r\n        if (!mode || mode === 'off')\r\n            return 'gray';\r\n        if (mode.includes('cool'))\r\n            return '#00aaff';\r\n        if (mode.includes('heat'))\r\n            return '#ff7043';\r\n        if (mode.includes('dry'))\r\n            return '#ffca28';\r\n        if (mode.includes('fan'))\r\n            return '#66bb6a';\r\n        if (mode.includes('auto'))\r\n            return '#26c6da';\r\n        return 'var(--paper-item-icon-color)';\r\n    }\r\n    _acBadge(mode) {\r\n        if (!mode || mode === 'off')\r\n            return { bg: 'rgba(158,158,158,0.95)', icon: 'mdi:power' };\r\n        if (mode.includes('cool'))\r\n            return { bg: '#00aaff', icon: 'mdi:snowflake' };\r\n        if (mode.includes('heat'))\r\n            return { bg: '#ff7043', icon: 'mdi:fire' };\r\n        if (mode.includes('dry'))\r\n            return { bg: '#ffca28', icon: 'mdi:water-percent' };\r\n        if (mode.includes('fan'))\r\n            return { bg: '#66bb6a', icon: 'mdi:fan' };\r\n        if (mode.includes('auto'))\r\n            return { bg: '#26c6da', icon: 'mdi:autorenew' };\r\n        return { bg: 'rgba(0,0,0,0.06)', icon: 'mdi:air-conditioner' };\r\n    }\r\n    _acPulseColors(mode) {\r\n        if (mode === null || mode === void 0 ? void 0 : mode.includes('cool'))\r\n            return { weak: 'rgba(0,170,255,0.12)', strong: 'rgba(0,170,255,0.26)' };\r\n        if (mode === null || mode === void 0 ? void 0 : mode.includes('heat'))\r\n            return { weak: 'rgba(255,112,67,0.12)', strong: 'rgba(255,112,67,0.26)' };\r\n        if (mode === null || mode === void 0 ? void 0 : mode.includes('dry'))\r\n            return { weak: 'rgba(255,202,40,0.12)', strong: 'rgba(255,202,40,0.26)' };\r\n        if (mode === null || mode === void 0 ? void 0 : mode.includes('fan'))\r\n            return { weak: 'rgba(102,187,106,0.12)', strong: 'rgba(102,187,106,0.26)' };\r\n        if (mode === null || mode === void 0 ? void 0 : mode.includes('auto'))\r\n            return { weak: 'rgba(38,198,218,0.12)', strong: 'rgba(38,198,218,0.26)' };\r\n        return { weak: 'rgba(0,0,0,0.06)', strong: 'rgba(0,0,0,0.12)' };\r\n    }\r\n    _openMoreInfo(entityId) {\r\n        if (!entityId)\r\n            return;\r\n        this.dispatchEvent(new CustomEvent('hass-more-info', {\r\n            detail: { entityId }, bubbles: true, composed: true,\r\n        }));\r\n    }\r\n    _acToggle(entityId) {\r\n        if (!entityId || !this.hass)\r\n            return;\r\n        const st = this.hass.states[entityId];\r\n        const mode = ((st === null || st === void 0 ? void 0 : st.state) || '').toLowerCase();\r\n        const on = !!mode && mode !== 'off';\r\n        this.hass.callService('climate', on ? 'turn_off' : 'turn_on', { entity_id: entityId });\r\n    }\r\n    _thermoToggle(entityId) {\r\n        if (!entityId || !this.hass)\r\n            return;\r\n        const st = this.hass.states[entityId];\r\n        const mode = ((st === null || st === void 0 ? void 0 : st.state) || '').toLowerCase();\r\n        const next = (mode === 'off') ? 'heat' : 'off';\r\n        this.hass.callService('climate', 'set_hvac_mode', { entity_id: entityId, hvac_mode: next });\r\n    }\r\n    _toggleGeneric(entityId) {\r\n        if (!entityId || !this.hass)\r\n            return;\r\n        const domain = entityId.split('.')[0];\r\n        const svc = (domain === 'switch' || domain === 'light') ? `${domain}.toggle` : 'homeassistant.toggle';\r\n        const [d, s] = svc.split('.');\r\n        this.hass.callService(d, s, { entity_id: entityId });\r\n    }\r\n    _isOn(entityId) {\r\n        if (!entityId || !this.hass)\r\n            return false;\r\n        const st = this.hass.states[entityId];\r\n        return ((st === null || st === void 0 ? void 0 : st.state) || '').toLowerCase() === 'on';\r\n    }\r\n    _rgbaFromColor(color, alpha = 0.5) {\r\n        const a = Math.max(0, Math.min(1, Number(alpha) || 0));\r\n        if (!color || typeof color !== 'string')\r\n            return `rgba(0,0,0,${a})`;\r\n        const c = color.trim();\r\n        if (c.startsWith('rgba(') || c.startsWith('rgb(') || c.startsWith('hsl(') || c.startsWith('var('))\r\n            return c;\r\n        const hex = c.replace('#', '');\r\n        const to255 = (h) => parseInt(h, 16);\r\n        if (hex.length === 3) {\r\n            const r = to255(hex[0] + hex[0]), g = to255(hex[1] + hex[1]), b = to255(hex[2] + hex[2]);\r\n            return `rgba(${r},${g},${b},${a})`;\r\n        }\r\n        if (hex.length >= 6) {\r\n            const r = to255(hex.slice(0, 2)), g = to255(hex.slice(2, 4)), b = to255(hex.slice(4, 6));\r\n            return `rgba(${r},${g},${b},${a})`;\r\n        }\r\n        return `rgba(0,0,0,${a})`;\r\n    }\r\n    _hasAnyUnavailable(c, h) {\r\n        if (!this.hass)\r\n            return false;\r\n        const ids = [];\r\n        const headers = Array.isArray(h) ? h : [h];\r\n        headers.forEach((hdr) => {\r\n            const mainRaw = (hdr === null || hdr === void 0 ? void 0 : hdr.main) || {};\r\n            const main = {\r\n                tap_entity: mainRaw.tap_entity,\r\n                hold_entity: mainRaw.hold_entity || mainRaw.tap_entity,\r\n                light_group_entity: mainRaw.light_group_entity,\r\n                temp_sensor: mainRaw.temp_sensor,\r\n                humidity_sensor: mainRaw.humidity_sensor,\r\n            };\r\n            const ac = (hdr === null || hdr === void 0 ? void 0 : hdr.ac) || {};\r\n            const thermostat = (hdr === null || hdr === void 0 ? void 0 : hdr.thermostat) || {};\r\n            ids.push(main === null || main === void 0 ? void 0 : main.tap_entity, main === null || main === void 0 ? void 0 : main.hold_entity, main === null || main === void 0 ? void 0 : main.light_group_entity, main === null || main === void 0 ? void 0 : main.temp_sensor, main === null || main === void 0 ? void 0 : main.humidity_sensor, ac === null || ac === void 0 ? void 0 : ac.entity, thermostat === null || thermostat === void 0 ? void 0 : thermostat.entity);\r\n        });\r\n        const rows = (c.switch_rows || []);\r\n        rows.forEach((row) => {\r\n            var _a;\r\n            const items = Array.isArray(row) ? row : (Array.isArray((_a = row) === null || _a === void 0 ? void 0 : _a.row) ? row.row : []);\r\n            items.forEach((sw) => ids.push(sw === null || sw === void 0 ? void 0 : sw.entity, sw === null || sw === void 0 ? void 0 : sw.hold_entity));\r\n        });\r\n        const bad = new Set(['unavailable', 'unknown', 'offline']);\r\n        return ids.some((id) => {\r\n            var _a, _b;\r\n            if (!id)\r\n                return false;\r\n            const st = (_b = (_a = this.hass) === null || _a === void 0 ? void 0 : _a.states) === null || _b === void 0 ? void 0 : _b[id];\r\n            const s = ((st === null || st === void 0 ? void 0 : st.state) || '').toLowerCase();\r\n            return bad.has(s);\r\n        });\r\n    }\r\n};\r\nBitosomeRoomCard.styles = css `\n    :host { display:block; }\n    .metrics, .metrics * { box-sizing: border-box; }\n\n    .metrics {\n      --ac-therm-icon: 50px;\n    }\n\n    ha-card {\n      border-radius: var(--ha-card-border-radius, 16px);\n      background: var(--ha-card-background, var(--card-background-color));\n      box-shadow: 0 10px 30px var(--panel-shadow-color);\n      padding: 12px;\n      color: var(--primary-text-color);\n      transition: filter 0.12s ease, box-shadow 0.12s ease;\n      position: relative;\n      /* Allow pulsing glows to spill outside to neighboring cards */\n      overflow: visible;\n    }\n    ha-card.unavailable {\n      animation: cardPulse 2.8s ease-in-out infinite;\n    }\n\n    .root { display: grid; gap: 12px; }\n\n    /* Removed surface wrapper to rely on ha-card styling */\n\n    /* Header row */\n    .header-row {\n      display: grid;\n      grid-template-columns: 1fr auto auto;\n      gap: 12px;\n      align-items: stretch;\n    }\n    .header-row.only-main { grid-template-columns: 1fr; }\n    .header-row.main-plus-one { grid-template-columns: 1fr auto; }\n    .header-row > * { height: var(--tile-h); }\n\n    /* MAIN tile */\n    .main-tile {\n      position: relative;\n      /* Ensure full-width layout even inside flex hosts like ha-control-button */\n      width: 100%;\n      height: var(--tile-h);\n      border-radius: var(--ha-card-border-radius, 12px);\n      box-shadow: 0 6px 18px rgba(0,0,0,0.10);\n      background: var(--ha-card-background, var(--card-background-color));\n      padding-left: 16px;\n      overflow: hidden;\n      transition: transform 0.12s ease, box-shadow 0.12s ease, filter 0.12s ease;\n    }\n    /* When wrapped in ha-control-button, inherit the native radius */\n    .main-control .main-tile { border-radius: inherit; }\n    /* Size the main control wrapper to match tile dimensions */\n    .main-control {\n      height: var(--tile-h);\n      width: 100%;\n      display: grid;\n      place-items: center;\n      border-radius: var(--ha-card-border-radius, 12px);\n      /* Match switch button surface colors/shadow */\n      background: var(--ha-card-background, var(--card-background-color));\n      color: var(--secondary-text-color);\n      box-shadow: 0 6px 18px rgba(0,0,0,0.10);\n      overflow: visible;\n    }\n    /* Ensure the internal HA button element matches the tile size */\n    .main-control::part(button) {\n      width: 100%;\n      height: var(--tile-h);\n      display: block;\n      padding: 0;\n      border-radius: inherit;\n    }\n    .main-icon {\n      position: absolute; left: 12px; top: 8px;\n      width: var(--main-icon-size, 48px); height: var(--main-icon-size, 48px); line-height: 0;\n      --mdc-icon-size: var(--main-icon-size, 48px);\n      color: var(--primary-text-color);\n    }\n    .chip-tr {\n      position: absolute; right: 8px; top: 8px; z-index: 3;\n      display: inline-flex; align-items: center; gap: 2px;\n      padding: 2px 6px; border-radius: var(--ha-chip-border-radius, 999px);\n      background: rgba(0,0,0,0.06);\n      font-size: var(--chip-font-size, 12px); color: var(--secondary-text-color); line-height: 1; white-space: nowrap;\n    }\n    .chip-tr ha-icon { width: 10px; height: 10px; line-height:0; --mdc-icon-size:10px; }\n    .chip-tr .tval, .chip-tr .hval { font-weight: 700; }\n\n    /* badge basics (bulb/lock/gate) */\n    .badge {\n      width: var(--badge); height: var(--badge);\n      border-radius: var(--ha-badge-border-radius, 999px);\n      display:flex; align-items:center; justify-content:center;\n      line-height:0;\n      background: rgba(0,0,0,0.06);\n    }\n    .badge ha-icon {\n      --mdc-icon-size: var(--badge-icon);\n      width: var(--badge-icon); height: var(--badge-icon);\n      display:block; margin:0; padding:0; line-height:0;\n      pointer-events:none;\n      color: var(--secondary-text-color);\n    }\n    .main-badges-br {\n      position: absolute; right: 8px; bottom: 8px; z-index: 3;\n      display: inline-flex; align-items: center; justify-content: flex-end;\n      gap: 6px; flex-wrap: wrap; max-width: calc(100% - 16px);\n    }\n    .main-name {\n      position: absolute; left: 12px; bottom: 8px;\n      font-weight: 500; font-size: 14px; color: var(--primary-text-color);\n    }\n\n    /* Illuminance badge on main tile (right-center, same chip pattern) */\n    .illum-badge {\n      position: absolute; right: 8px; top: 50%; z-index: 3;\n      transform: translateY(-50%);\n      display: inline-flex; align-items: center; gap: 6px;\n      padding: 2px 8px; border-radius: var(--ha-chip-border-radius, 999px);\n      background: rgba(0,0,0,0.06);\n      font-size: var(--chip-font-size, 12px); color: var(--secondary-text-color); line-height: 1; white-space: nowrap;\n    }\n    .illum-badge ha-icon { width: 12px; height: 12px; line-height:0; --mdc-icon-size:12px; }\n\n    /* AC & THERMOSTAT squares â width == height == --tile-h */\n    .square {\n      position: relative;\n      width: var(--tile-h); height: var(--tile-h);\n      aspect-ratio: 1 / 1;\n      border-radius: var(--ha-card-border-radius, 12px);\n      background: var(--ha-card-background, var(--card-background-color));\n      backdrop-filter: blur(10px);\n      transition: transform 0.18s ease, box-shadow 0.28s ease, filter 0.12s ease;\n      box-shadow: 0 6px 18px rgba(0,0,0,0.10);\n      overflow: hidden;\n      display: grid; place-items: center;\n    }\n\n    /* Ensure inner tiles inherit native button border when wrapped in ha-control-button */\n    .ac-control, .thermo-control {\n      height: var(--tile-h);\n      width: var(--tile-h);\n      display:grid;\n      place-items:center;\n      /* Always apply HA theme surface + radius like switch button */\n      background: var(--ha-card-background, var(--card-background-color));\n      color: var(--secondary-text-color);\n      border-radius: var(--ha-card-border-radius, 12px);\n      box-shadow: 0 6px 18px rgba(0,0,0,0.10);\n      overflow: visible;\n    }\n    .ac-control .square, .thermo-control .square { border-radius: inherit; }\n\n    .center-xy { position: static; transform: none; display:flex; align-items:center; justify-content:center; pointer-events:none; user-select:none; line-height:0; }\n    .ac-fan, .thermo-icon {\n      width: var(--ac-therm-icon);\n      height: var(--ac-therm-icon);\n      --mdc-icon-size: var(--ac-therm-icon);\n      display: block; margin: 0; padding: 0; line-height: 0; transform-origin: 50% 50%; pointer-events: none;\n    }\n\n    /* AC mode badge (top-right) */\n    .badge-tr { position: absolute; right: 8px; top: 8px; z-index: 3; }\n\n    /* Thermostat temp chip (top-right) */\n    .temp-chip-tr { position: absolute; right: 8px; top: 8px; z-index: 3; display:inline-flex; align-items:center; }\n    .temp-pill { display:inline-flex; align-items:center; justify-content:center; padding: 0 6px; border-radius: var(--ha-chip-border-radius, 999px); background: var(--chip-background-color, rgba(0,0,0,0.06)); font-size: var(--chip-font-size, 12px); color: var(--secondary-text-color); line-height:1; white-space:nowrap; font-weight:700; max-width: calc(var(--tile-h) - 16px); min-height: var(--badge); }\n    .temp-chip-tr ha-chip { font-size: var(--chip-font-size, 12px); }\n\n    /* Animations */\n    @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }\n    @keyframes activePulse {\n      0%   { box-shadow: 0 10px 20px var(--pulse-weak); transform: translateY(0) scale(1); }\n      45%  { box-shadow: 0 28px 56px var(--pulse-strong); transform: translateY(-1px) scale(1.02); }\n      100% { box-shadow: 0 10px 20px var(--pulse-weak); transform: translateY(0) scale(1); }\n    }\n    @keyframes heatingGlow {\n      0%   { box-shadow: 0 6px 18px rgba(0,0,0,0.10); }\n      50%  { box-shadow: 0 0 30px rgba(255,112,67,0.32); }\n      100% { box-shadow: 0 6px 18px rgba(0,0,0,0.10); }\n    }\n    /* Pure glow (no movement/scale) */\n    @keyframes glowPulse {\n      0%   { box-shadow: 0 10px 20px var(--pulse-weak); }\n      50%  { box-shadow: 0 28px 56px var(--pulse-strong); }\n      100% { box-shadow: 0 10px 20px var(--pulse-weak); }\n    }\n    @keyframes cardPulse {\n      0%   { box-shadow: 0 10px 30px var(--panel-shadow-color); }\n      50%  { box-shadow: 0 10px 30px var(--panel-shadow-color), 0 0 36px var(--unavail-strong); }\n      100% { box-shadow: 0 10px 30px var(--panel-shadow-color); }\n    }\n\n    /* Switch rows */\n    .switch-row { display:grid; grid-template-columns: repeat(var(--cols,3), 1fr); gap: 12px; }\n    /* Native HA control button variant for switch tiles */\n    .switch-tile-btn {\n      height: var(--tile-h);\n      width: 100%;\n      display: grid; place-items: center;\n      position: relative;\n      overflow: visible;\n      color: var(--secondary-text-color);\n      /* Give button variant a visible surface like tiles */\n      background: var(--ha-card-background, var(--card-background-color));\n      border-radius: var(--ha-card-border-radius, 12px);\n      box-shadow: 0 6px 18px rgba(0,0,0,0.10);\n      transition: transform 0.12s ease, box-shadow 0.12s ease, filter 0.12s ease;\n    }\n    /* Hover feedback (align with tile hover); do not override ON glow */\n    .switch-tile-btn:not(.on):hover {\n      transform: translateY(-1px);\n      box-shadow: 0 12px 24px rgba(0,0,0,0.16);\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n    /* ON state for native HA button: persistent glow on same layer as hover (no brightness) */\n    .switch-tile-btn.on {\n      border-radius: var(--ha-card-border-radius, 12px);\n      position: relative;\n      /* Ensure glow animation has defined colors */\n      --pulse-weak: rgba(255,193,7,0.16);\n      --pulse-strong: rgba(255,193,7,0.30);\n      box-shadow:\n        0 18px 40px rgba(255,193,7,0.30),\n        0 6px 18px rgba(255,193,7,0.16);\n      /* Static glow (no pulsing for switches) */\n      will-change: box-shadow, filter;\n    }\n    .switch-tile-btn.on:hover,\n    .switch-tile-btn.on:hover > .tile-inner {\n      /* Ensure ON hover keeps glow even if generic hover sets a shadow */\n      border-radius: var(--ha-card-border-radius, 12px);\n      transform: translateY(-1px);\n      box-shadow:\n        0 18px 40px rgba(255,193,7,0.30) !important,\n        0 6px 18px rgba(255,193,7,0.16) !important;\n      /* Use only box-shadow to ensure radius consistency */\n    }\n    /* Smart plug ON: persistent green glow on same layer as hover (no brightness) */\n    .switch-tile-btn.smart.on {\n      /* Ensure glow animation has defined colors (green for smart plugs) */\n      --pulse-weak: rgba(0,200,83,0.16);\n      --pulse-strong: rgba(0,200,83,0.30);\n      box-shadow:\n        0 18px 40px rgba(0,200,83,0.30),\n        0 6px 18px rgba(0,200,83,0.16);\n      /* Static glow (no pulsing for switches) */\n      will-change: box-shadow, filter;\n    }\n    .switch-tile-btn.smart.on:hover,\n    .switch-tile-btn.smart.on:hover > .tile-inner {\n      /* Ensure SMART ON hover keeps GREEN glow */\n      border-radius: var(--ha-card-border-radius, 12px);\n      transform: translateY(-1px);\n      box-shadow:\n        0 18px 40px rgba(0,200,83,0.30) !important,\n        0 6px 18px rgba(0,200,83,0.16) !important;\n      /* Use only box-shadow to ensure radius consistency */\n    }\n    .switch-tile {\n      position: relative;\n      height: var(--tile-h);\n      border-radius: var(--ha-card-border-radius, 12px);\n      background: var(--ha-card-background, var(--card-background-color));\n      box-shadow: 0 6px 18px rgba(0,0,0,0.10);\n      transition: transform 0.12s ease, box-shadow 0.12s ease, filter 0.12s ease;\n      display: grid; place-items: center;\n      color: var(--secondary-text-color);\n    }\n    /* (Removed) embedded card styles */\n    /* Native-like hover feedback per-tile: slight lift + stronger shadow */\n    .main-tile:hover,\n    .square:hover,\n    .switch-tile:not(.on):hover {\n      transform: translateY(-1px);\n      box-shadow: 0 12px 24px rgba(0,0,0,0.16);\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n    /* Hover for main control wrapper */\n    .main-control:hover { transform: translateY(-1px); box-shadow: 0 12px 24px rgba(0,0,0,0.16); }\n    /* Match hover for ha-control-button wrappers (AC/Thermo) */\n    .ac-control:hover,\n    .thermo-control:hover,\n    .switch-tile-btn:not(.on):hover {\n      transform: translateY(-1px);\n      box-shadow: 0 12px 24px rgba(0,0,0,0.16);\n    }\n\n    /* Thermostat: pulsing glow only (no movement) */\n    .thermo-control.on {\n      border-radius: var(--ha-card-border-radius, 12px);\n      box-shadow:\n        0 18px 40px var(--pulse-strong, rgba(255,112,67,0.30)),\n        0 6px 18px var(--pulse-weak, rgba(255,112,67,0.16));\n      animation: glowPulse 2.4s ease-in-out infinite;\n    }\n\n    /* AC: pulsing glow on wrapper when active (no movement) */\n    .ac-control.on {\n      border-radius: var(--ha-card-border-radius, 12px);\n      box-shadow:\n        0 18px 40px var(--pulse-strong, rgba(0,170,255,0.30)),\n        0 6px 18px var(--pulse-weak, rgba(0,170,255,0.16));\n      animation: glowPulse 2.4s ease-in-out infinite;\n    }\n    .tile-inner { display:grid; gap:4px; place-items:center; justify-items:center; text-align:center; }\n    .switch-tile .name { font-weight: 600; font-size: 12px; }\n    .switch-icon { width: 28px; height: 28px; color: var(--secondary-text-color); line-height:0; }\n    .tile-inner ha-chip { font-size: var(--chip-font-size, 12px); }\n\n    /* ON base style (non-button): persistent glow on same layer as hover (no brightness) */\n    .switch-tile.on {\n      /* Ensure glow animation has defined colors */\n      --pulse-weak: rgba(255,193,7,0.16);\n      --pulse-strong: rgba(255,193,7,0.30);\n      box-shadow:\n        0 18px 40px rgba(255,193,7,0.30),\n        0 6px 18px rgba(255,193,7,0.16);\n      /* Glow visible even without hover */\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n    .switch-tile.on:hover {\n      /* Ensure ON hover keeps glow even if generic hover sets a shadow */\n      transform: translateY(-1px);\n      box-shadow:\n        0 18px 40px rgba(255,193,7,0.30) !important,\n        0 6px 18px rgba(255,193,7,0.16) !important;\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n\n    /* Smart plug: animated band + GREEN glow (not yellow) */\n    @keyframes chase {\n      0%   { background-position: -150% 0, 0 0; }\n      50%  { background-position: 50% 0, 0 0; }\n      100% { background-position: 250% 0, 0 0; }\n    }\n    .switch-tile.smart.on {\n      /* Ensure glow animation has defined colors (green for smart plugs) */\n      --pulse-weak: rgba(0,200,83,0.16);\n      --pulse-strong: rgba(0,200,83,0.30);\n      box-shadow:\n        0 18px 40px rgba(0,200,83,0.30),\n        0 6px 18px rgba(0,200,83,0.16);\n      /* Glow visible even without hover */\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n    .switch-tile.smart.on:hover {\n      /* Ensure SMART ON hover keeps GREEN glow */\n      transform: translateY(-1px);\n      box-shadow:\n        0 18px 40px rgba(0,200,83,0.30) !important,\n        0 6px 18px rgba(0,200,83,0.16) !important;\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n\n    .clickable { cursor: pointer; }\n  `;\r\n__decorate([\r\n    property({ attribute: false })\r\n], BitosomeRoomCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    state()\r\n], BitosomeRoomCard.prototype, \"_config\", void 0);\r\nBitosomeRoomCard = BitosomeRoomCard_1 = __decorate([\r\n    customElement('bitosome-room-card')\r\n], BitosomeRoomCard);\r\nexport { BitosomeRoomCard };\r\nwindow.customCards = window.customCards || [];\r\nwindow.customCards.push({\r\n    type: 'bitosome-room-card',\r\n    name: 'Room card',\r\n    description: 'Room control card',\r\n    preview: false,\r\n    version: CARD_VERSION,\r\n});\r\n// Fancy console banner (logs once)\r\ntry {\r\n    const w = window;\r\n    if (!w.__BITOSOME_ROOM_CARD_LOGGED__) {\r\n        const l1 = 'background:#3f51b5;color:#fff;padding:2px 6px;border-radius:4px 0 0 4px;font-weight:700';\r\n        const l2 = 'background:#e0e0e0;color:#111;padding:2px 6px;border-radius:0 4px 4px 0;';\r\n        // eslint-disable-next-line no-console\r\n        console.info(`%cbitosome-room-card%c v${CARD_VERSION} loaded`, l1, l2);\r\n        w.__BITOSOME_ROOM_CARD_LOGGED__ = true;\r\n    }\r\n}\r\ncatch (e) { /* no-op */ }\r\nexport default BitosomeRoomCard;\r\n","references":["/Users/arku02/Repositories/room-card/node_modules/lit/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/lit/decorators.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/src/action-handler-directive.ts","/Users/arku02/Repositories/room-card/src/const.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts","/Users/arku02/Repositories/room-card/node_modules/custom-card-helpers/dist/index.d.ts"]}
